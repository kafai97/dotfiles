#compdef _glooctl glooctl


function _glooctl {
  local -a commands

  _arguments -C \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "add:Adds configuration to a top-level Gloo resource"
      "check:Checks Gloo resources for errors (requires Gloo running on Kubernetes)"
      "cluster:Cluster commands"
      "completion:generate auto completion for your shell"
      "create:Create a Gloo resource"
      "dashboard:Open Gloo dashboard"
      "debug:Debug a Gloo resource (requires Gloo running on Kubernetes)"
      "delete:Delete a Gloo resource"
      "demo:Demos (requires 4 tools to be installed and accessible via the PATH: glooctl, kubectl, docker, and kind.)"
      "edit:Edit a Gloo resource"
      "get:Display one or a list of Gloo resources"
      "help:Help about any command"
      "install:install gloo on different platforms"
      "istio:Commands for interacting with Istio in Gloo"
      "plugin:Commands for interacting with glooctl plugins"
      "proxy:interact with proxy instances managed by Gloo"
      "remove:remove configuration items from a top-level Gloo resource"
      "route:subcommands for interacting with routes within virtual services"
      "uninstall:uninstall gloo"
      "upgrade:upgrade glooctl binary"
      "version:Print current version"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  add)
    _glooctl_add
    ;;
  check)
    _glooctl_check
    ;;
  cluster)
    _glooctl_cluster
    ;;
  completion)
    _glooctl_completion
    ;;
  create)
    _glooctl_create
    ;;
  dashboard)
    _glooctl_dashboard
    ;;
  debug)
    _glooctl_debug
    ;;
  delete)
    _glooctl_delete
    ;;
  demo)
    _glooctl_demo
    ;;
  edit)
    _glooctl_edit
    ;;
  get)
    _glooctl_get
    ;;
  help)
    _glooctl_help
    ;;
  install)
    _glooctl_install
    ;;
  istio)
    _glooctl_istio
    ;;
  plugin)
    _glooctl_plugin
    ;;
  proxy)
    _glooctl_proxy
    ;;
  remove)
    _glooctl_remove
    ;;
  route)
    _glooctl_route
    ;;
  uninstall)
    _glooctl_uninstall
    ;;
  upgrade)
    _glooctl_upgrade
    ;;
  version)
    _glooctl_version
    ;;
  esac
}


function _glooctl_add {
  local -a commands

  _arguments -C \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "route:Add a Route to a Virtual Service"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  route)
    _glooctl_add_route
    ;;
  esac
}

function _glooctl_add_route {
  _arguments \
    '(-a --aws-function-name)'{-a,--aws-function-name}'[logical name of the AWS lambda to invoke with this route. use if destination is an AWS upstream]:' \
    '--aws-unescape[unescape JSON returned by this lambda function (useful if the response is not intended to be JSON formatted, e.g. in the case of static content (images, HTML, etc.) being served by Lambda]' \
    '--cluster-scoped-vs-client[search for *-domain virtual services outside gloo system namespace to add route to]' \
    '--delegate-name[name of the delegated RouteTable for this route]:' \
    '--delegate-namespace[namespace of the delegated RouteTable for this route]:' \
    '(-u --dest-name)'{-u,--dest-name}'[name of the destination upstream for this route]:' \
    '(-s --dest-namespace)'{-s,--dest-namespace}'[namespace of the destination upstream for this route]:' \
    '(*-d *--header)'{\*-d,\*--header}'[headers to match on the request. values can be specified using regex strings]:' \
    '(-x --index)'{-x,--index}'[index in the virtual service'\''s or route table'\''sroute list where to insert this route. routes after it will be shifted back one]:' \
    '(*-m *--method)'{\*-m,\*--method}'[the HTTP methods (GET, POST, etc.) to match on the request. if empty, all methods will match ]:' \
    '(-e --path-exact)'{-e,--path-exact}'[exact path to match route]:' \
    '(-p --path-prefix)'{-p,--path-prefix}'[path prefix to match route]:' \
    '(-r --path-regex)'{-r,--path-regex}'[regex matcher for route. note: only one of path-exact, path-regex, or path-prefix should be set]:' \
    '--prefix-rewrite[rewrite the matched portion of HTTP requests with this prefix.
note that this will be overridden if your routes point to function destinations]:' \
    '(*-q *--queryParameter)'{\*-q,\*--queryParameter}'[query parameters to match on the request. values can be specified using regex strings]:' \
    '(-f --rest-function-name)'{-f,--rest-function-name}'[name of the REST function to invoke with this route. use if destination has a REST service spec]:' \
    '*--rest-parameters[Parameters for the rest function that are to be read off of incoming request headers. format specified as follows: '\''header_name=extractor_string'\'' where header_name is the HTTP2 equivalent header ('\'':path'\'' for HTTP 1 path).

For example, to extract the variable '\''id'\'' from the following request path /users/1, where 1 is the id:
--rest-parameters '\'':path='\''/users/{id}'\'']:' \
    '--to-route-table[insert the route into a route table rather than a virtual service]' \
    '--upstream-group-name[name of the upstream group destination for this route]:' \
    '--upstream-group-namespace[namespace of the upstream group destination for this route]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_check {
  _arguments \
    '(*-x *--exclude)'{\*-x,\*--exclude}'[check to exclude: (pods, upstreamgroup, secrets, gateways, proxies)]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_cluster {
  local -a commands

  _arguments -C \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "deregister:Deregister a cluster to the Gloo Federation control plane"
      "list:List clusters registered to the Gloo Federation control plane"
      "register:Register a cluster to the Gloo Federation control plane"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  deregister)
    _glooctl_cluster_deregister
    ;;
  list)
    _glooctl_cluster_list
    ;;
  register)
    _glooctl_cluster_register
    ;;
  esac
}

function _glooctl_cluster_deregister {
  _arguments \
    '--cluster-name[name of the cluster to deregister]:' \
    '--federation-namespace[namespace of the Gloo Federation control plane]:' \
    '--remote-context[name of the kubeconfig context to use for deregistration]:' \
    '--remote-kubeconfig[path to the kubeconfig from which the deregistered cluster will be accessed]:' \
    '--remote-namespace[namespace in the target cluster where artifacts should be deleted]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_cluster_list {
  _arguments \
    '--federation-namespace[namespace of the Gloo Federation control plane]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_cluster_register {
  _arguments \
    '--cluster-name[name of the cluster to register]:' \
    '--federation-namespace[namespace of the Gloo Federation control plane]:' \
    '--remote-context[name of the kubeconfig context to use for registration]:' \
    '--remote-kubeconfig[path to the kubeconfig from which the registered cluster will be accessed]:' \
    '--remote-namespace[namespace in the target cluster where registration artifacts should be written]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_completion {
  _arguments \
    '(-h --help)'{-h,--help}'[help for completion]' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    '1: :("bash" "zsh")'
}


function _glooctl_create {
  local -a commands

  _arguments -C \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-f --file)'{-f,--file}'[file to be read or written to]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "authconfig:Create an Auth Config"
      "secret:Create a secret"
      "upstream:Create an Upstream"
      "upstreamgroup:Create an Upstream Group"
      "virtualservice:Create a Virtual Service"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  authconfig)
    _glooctl_create_authconfig
    ;;
  secret)
    _glooctl_create_secret
    ;;
  upstream)
    _glooctl_create_upstream
    ;;
  upstreamgroup)
    _glooctl_create_upstreamgroup
    ;;
  virtualservice)
    _glooctl_create_virtualservice
    ;;
  esac
}

function _glooctl_create_authconfig {
  _arguments \
    '*--apikey-label-selector[apikey label selector to identify valid apikeys for this virtual service; a comma-separated list of labels (key=value)]:' \
    '--apikey-secret-name[name to search for in provided namespace for an individual apikey secret]:' \
    '--apikey-secret-namespace[namespace to search for an individual apikey secret]:' \
    '--auth-endpoint-query-params[additional static query parameters to include in authorization request to identity provider]:' \
    '--enable-apikey-auth[enable apikey auth features for this virtual service]' \
    '--enable-oidc-auth[enable oidc auth features for this virtual service]' \
    '--enable-opa-auth[enable opa auth features for this virtual service]' \
    '--oidc-auth-app-url[the public url of your app]:' \
    '--oidc-auth-callback-path[the callback path. relative to the app url.]:' \
    '--oidc-auth-client-id[client id as registered with id provider]:' \
    '--oidc-auth-client-secret-name[name of the '\''client secret'\'' secret]:' \
    '--oidc-auth-client-secret-namespace[namespace of the '\''client secret'\'' secret]:' \
    '--oidc-auth-issuer-url[the url of the issuer]:' \
    '*--oidc-scope[scopes to request in addition to '\''openid'\''. optional.]:' \
    '*--opa-module-ref[namespace.name references to a config map containing OPA modules]:' \
    '--opa-query[The OPA query to evaluate on a request]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_create_secret {
  local -a commands

  _arguments -C \
    '--use-vault[use Vault Key-Value storage as the backend for reading and writing secrets]' \
    '--vault-address[address of the Vault server. This should be a complete  URL such as "http://vault.example.com". Use with --use-vault]:' \
    '--vault-ca-cert[CACert is the path to a PEM-encoded CA cert file to use to verify the Vault server SSL certificate.Use with --use-vault]:' \
    '--vault-ca-path[CAPath is the path to a directory of PEM-encoded CA cert files to verify the Vault server SSL certificate.Use with --use-vault]:' \
    '--vault-client-cert[ClientCert is the path to the certificate for Vault communication.Use with --use-vault]:' \
    '--vault-client-key[ClientKey is the path to the private key for Vault communication.Use with --use-vault]:' \
    '--vault-root-key[key prefix for for Vault key-value storage.]:' \
    '--vault-tls-insecure[Insecure enables or disables SSL verification.Use with --use-vault]' \
    '--vault-tls-server-name[TLSServerName, if set, is used to set the SNI host when connecting via TLS.Use with --use-vault]:' \
    '--vault-token[address of the Vault server. This should be a complete  URL such as "http://vault.example.com". Use with --use-vault]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "apikey:Create an ApiKey secret with the given name (Enterprise)"
      "aws:Create an AWS secret with the given name"
      "azure:Create an Azure secret with the given name"
      "header:Create a header secret with the given name"
      "oauth:Create an OAuth secret with the given name (Enterprise)"
      "tls:Create a secret with the given name"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  apikey)
    _glooctl_create_secret_apikey
    ;;
  aws)
    _glooctl_create_secret_aws
    ;;
  azure)
    _glooctl_create_secret_azure
    ;;
  header)
    _glooctl_create_secret_header
    ;;
  oauth)
    _glooctl_create_secret_oauth
    ;;
  tls)
    _glooctl_create_secret_tls
    ;;
  esac
}

function _glooctl_create_secret_apikey {
  _arguments \
    '--apikey[apikey to be stored in secret]:' \
    '--apikey-generate[generate an apikey]' \
    '*--apikey-labels[comma-separated labels for the apikey secret (key=value)]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    '--use-vault[use Vault Key-Value storage as the backend for reading and writing secrets]' \
    '--vault-address[address of the Vault server. This should be a complete  URL such as "http://vault.example.com". Use with --use-vault]:' \
    '--vault-ca-cert[CACert is the path to a PEM-encoded CA cert file to use to verify the Vault server SSL certificate.Use with --use-vault]:' \
    '--vault-ca-path[CAPath is the path to a directory of PEM-encoded CA cert files to verify the Vault server SSL certificate.Use with --use-vault]:' \
    '--vault-client-cert[ClientCert is the path to the certificate for Vault communication.Use with --use-vault]:' \
    '--vault-client-key[ClientKey is the path to the private key for Vault communication.Use with --use-vault]:' \
    '--vault-root-key[key prefix for for Vault key-value storage.]:' \
    '--vault-tls-insecure[Insecure enables or disables SSL verification.Use with --use-vault]' \
    '--vault-tls-server-name[TLSServerName, if set, is used to set the SNI host when connecting via TLS.Use with --use-vault]:' \
    '--vault-token[address of the Vault server. This should be a complete  URL such as "http://vault.example.com". Use with --use-vault]:'
}

function _glooctl_create_secret_aws {
  _arguments \
    '--access-key[aws access key]:' \
    '--secret-key[aws secret key]:' \
    '--session-token[aws session token]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    '--use-vault[use Vault Key-Value storage as the backend for reading and writing secrets]' \
    '--vault-address[address of the Vault server. This should be a complete  URL such as "http://vault.example.com". Use with --use-vault]:' \
    '--vault-ca-cert[CACert is the path to a PEM-encoded CA cert file to use to verify the Vault server SSL certificate.Use with --use-vault]:' \
    '--vault-ca-path[CAPath is the path to a directory of PEM-encoded CA cert files to verify the Vault server SSL certificate.Use with --use-vault]:' \
    '--vault-client-cert[ClientCert is the path to the certificate for Vault communication.Use with --use-vault]:' \
    '--vault-client-key[ClientKey is the path to the private key for Vault communication.Use with --use-vault]:' \
    '--vault-root-key[key prefix for for Vault key-value storage.]:' \
    '--vault-tls-insecure[Insecure enables or disables SSL verification.Use with --use-vault]' \
    '--vault-tls-server-name[TLSServerName, if set, is used to set the SNI host when connecting via TLS.Use with --use-vault]:' \
    '--vault-token[address of the Vault server. This should be a complete  URL such as "http://vault.example.com". Use with --use-vault]:'
}

function _glooctl_create_secret_azure {
  _arguments \
    '*--api-keys[comma-separated list of azure api key=value entries]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    '--use-vault[use Vault Key-Value storage as the backend for reading and writing secrets]' \
    '--vault-address[address of the Vault server. This should be a complete  URL such as "http://vault.example.com". Use with --use-vault]:' \
    '--vault-ca-cert[CACert is the path to a PEM-encoded CA cert file to use to verify the Vault server SSL certificate.Use with --use-vault]:' \
    '--vault-ca-path[CAPath is the path to a directory of PEM-encoded CA cert files to verify the Vault server SSL certificate.Use with --use-vault]:' \
    '--vault-client-cert[ClientCert is the path to the certificate for Vault communication.Use with --use-vault]:' \
    '--vault-client-key[ClientKey is the path to the private key for Vault communication.Use with --use-vault]:' \
    '--vault-root-key[key prefix for for Vault key-value storage.]:' \
    '--vault-tls-insecure[Insecure enables or disables SSL verification.Use with --use-vault]' \
    '--vault-tls-server-name[TLSServerName, if set, is used to set the SNI host when connecting via TLS.Use with --use-vault]:' \
    '--vault-token[address of the Vault server. This should be a complete  URL such as "http://vault.example.com". Use with --use-vault]:'
}

function _glooctl_create_secret_header {
  _arguments \
    '*--headers[comma-separated list of header name=value entries]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    '--use-vault[use Vault Key-Value storage as the backend for reading and writing secrets]' \
    '--vault-address[address of the Vault server. This should be a complete  URL such as "http://vault.example.com". Use with --use-vault]:' \
    '--vault-ca-cert[CACert is the path to a PEM-encoded CA cert file to use to verify the Vault server SSL certificate.Use with --use-vault]:' \
    '--vault-ca-path[CAPath is the path to a directory of PEM-encoded CA cert files to verify the Vault server SSL certificate.Use with --use-vault]:' \
    '--vault-client-cert[ClientCert is the path to the certificate for Vault communication.Use with --use-vault]:' \
    '--vault-client-key[ClientKey is the path to the private key for Vault communication.Use with --use-vault]:' \
    '--vault-root-key[key prefix for for Vault key-value storage.]:' \
    '--vault-tls-insecure[Insecure enables or disables SSL verification.Use with --use-vault]' \
    '--vault-tls-server-name[TLSServerName, if set, is used to set the SNI host when connecting via TLS.Use with --use-vault]:' \
    '--vault-token[address of the Vault server. This should be a complete  URL such as "http://vault.example.com". Use with --use-vault]:'
}

function _glooctl_create_secret_oauth {
  _arguments \
    '--client-secret[oauth client secret]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    '--use-vault[use Vault Key-Value storage as the backend for reading and writing secrets]' \
    '--vault-address[address of the Vault server. This should be a complete  URL such as "http://vault.example.com". Use with --use-vault]:' \
    '--vault-ca-cert[CACert is the path to a PEM-encoded CA cert file to use to verify the Vault server SSL certificate.Use with --use-vault]:' \
    '--vault-ca-path[CAPath is the path to a directory of PEM-encoded CA cert files to verify the Vault server SSL certificate.Use with --use-vault]:' \
    '--vault-client-cert[ClientCert is the path to the certificate for Vault communication.Use with --use-vault]:' \
    '--vault-client-key[ClientKey is the path to the private key for Vault communication.Use with --use-vault]:' \
    '--vault-root-key[key prefix for for Vault key-value storage.]:' \
    '--vault-tls-insecure[Insecure enables or disables SSL verification.Use with --use-vault]' \
    '--vault-tls-server-name[TLSServerName, if set, is used to set the SNI host when connecting via TLS.Use with --use-vault]:' \
    '--vault-token[address of the Vault server. This should be a complete  URL such as "http://vault.example.com". Use with --use-vault]:'
}

function _glooctl_create_secret_tls {
  _arguments \
    '--certchain[filename of certchain for secret]:' \
    '--privatekey[filename of privatekey for secret]:' \
    '--rootca[filename of rootca for secret]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    '--use-vault[use Vault Key-Value storage as the backend for reading and writing secrets]' \
    '--vault-address[address of the Vault server. This should be a complete  URL such as "http://vault.example.com". Use with --use-vault]:' \
    '--vault-ca-cert[CACert is the path to a PEM-encoded CA cert file to use to verify the Vault server SSL certificate.Use with --use-vault]:' \
    '--vault-ca-path[CAPath is the path to a directory of PEM-encoded CA cert files to verify the Vault server SSL certificate.Use with --use-vault]:' \
    '--vault-client-cert[ClientCert is the path to the certificate for Vault communication.Use with --use-vault]:' \
    '--vault-client-key[ClientKey is the path to the private key for Vault communication.Use with --use-vault]:' \
    '--vault-root-key[key prefix for for Vault key-value storage.]:' \
    '--vault-tls-insecure[Insecure enables or disables SSL verification.Use with --use-vault]' \
    '--vault-tls-server-name[TLSServerName, if set, is used to set the SNI host when connecting via TLS.Use with --use-vault]:' \
    '--vault-token[address of the Vault server. This should be a complete  URL such as "http://vault.example.com". Use with --use-vault]:'
}


function _glooctl_create_upstream {
  local -a commands

  _arguments -C \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "aws:Create an Aws Upstream"
      "azure:Create an Azure Upstream"
      "consul:Create a Consul Upstream"
      "ec2:Create an EC2 Upstream"
      "kube:Create a Kubernetes Upstream"
      "static:Create a Static Upstream"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  aws)
    _glooctl_create_upstream_aws
    ;;
  azure)
    _glooctl_create_upstream_azure
    ;;
  consul)
    _glooctl_create_upstream_consul
    ;;
  ec2)
    _glooctl_create_upstream_ec2
    ;;
  kube)
    _glooctl_create_upstream_kube
    ;;
  static)
    _glooctl_create_upstream_static
    ;;
  esac
}

function _glooctl_create_upstream_aws {
  _arguments \
    '--aws-region[region for AWS services this upstream utilize]:' \
    '--aws-secret-name[name of a secret containing AWS credentials created with glooctl. See `glooctl create secret aws --help` for help creating secrets]:' \
    '--aws-secret-namespace[namespace where the AWS secret lives. See `glooctl create secret aws --help` for help creating secrets]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_create_upstream_azure {
  _arguments \
    '--azure-app-name[name of the Azure Functions app to associate with this upstream]:' \
    '--azure-secret-name[name of a secret containing Azure credentials created with glooctl. See `glooctl create secret azure --help` for help creating secrets]:' \
    '--azure-secret-namespace[namespace where the Azure secret lives. See `glooctl create secret azure --help` for help creating secrets]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_create_upstream_consul {
  _arguments \
    '--consul-service[name of the service in the consul registry]:' \
    '*--consul-service-tags[comma-separated list of tags for choosing a subset of the service in the consul registry]:' \
    '--service-spec-type[if set, Gloo supports additional routing features to upstreams with a service spec. The service spec defines a set of features ]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_create_upstream_ec2 {
  _arguments \
    '--aws-region[region for AWS services this upstream utilize]:' \
    '--aws-role-arn[Amazon Resource Number (ARN) of role that Gloo should assume on behalf of the upstream]:' \
    '--aws-secret-name[name of a secret containing AWS credentials created with glooctl. See `glooctl create secret aws --help` for help creating secrets]:' \
    '--aws-secret-namespace[namespace where the AWS secret lives. See `glooctl create secret aws --help` for help creating secrets]:' \
    '--ec2-port[port to use to connect to the EC2 instance (default 80)]:' \
    '--public-ip[use instance'\''s public IP address]' \
    '*--tag-key-filters[list of tag keys that must exist on EC2 instances associated with this upstream]:' \
    '*--tag-key-value-filters[list of tag keys and corresponding values that must exist on EC2 instances associated with this upstream]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_create_upstream_kube {
  _arguments \
    '--kube-service[name of the kubernetes service]:' \
    '*--kube-service-labels[comma-separated list of labels (key=value) to use for customized selection of pods for this upstream. can be used to select subsets of pods for a service e.g. for blue-green deployment]:' \
    '--kube-service-namespace[namespace where the kubernetes service lives]:' \
    '--kube-service-port[the port exposed by the kubernetes service. for services with multiple ports, create an upstream for each port.]:' \
    '--service-spec-type[if set, Gloo supports additional routing features to upstreams with a service spec. The service spec defines a set of features ]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_create_upstream_static {
  _arguments \
    '--service-spec-type[if set, Gloo supports additional routing features to upstreams with a service spec. The service spec defines a set of features ]:' \
    '*--static-hosts[comma-separated list of hosts for the static upstream. these are hostnames or ips provided in the format IP:PORT or HOSTNAME:PORT. if :PORT is missing, it will default to :80]:' \
    '--static-outbound-tls[connections Gloo manages to this cluster will attempt to use TLS for outbound connections. Gloo will automatically set this to true for port 443]' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_create_upstreamgroup {
  _arguments \
    '*--weighted-upstreams[comma-separated list of weighted upstream key=value entries (namespace.upstreamName=weight)]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_create_virtualservice {
  _arguments \
    '--display-name[descriptive name of virtual service (defaults to resource name)]:' \
    '*--domains[comma separated list of domains]:' \
    '--enable-rate-limiting[enable rate limiting features for this virtual service]' \
    '--rate-limit-requests[requests per unit of time]:' \
    '--rate-limit-time-unit[unit of time over which to apply the rate limit]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '--dry-run[print kubernetes-formatted yaml rather than creating or updating a resource]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_dashboard {
  _arguments \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-v --verbose)'{-v,--verbose}'[If true, output from kubectl commands will print to stdout/stderr]' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_debug {
  local -a commands

  _arguments -C \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "logs:Debug Gloo logs (requires Gloo running on Kubernetes)"
      "yaml:Dump YAML representing the current Gloo state (requires Gloo running on Kubernetes)"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  logs)
    _glooctl_debug_logs
    ;;
  yaml)
    _glooctl_debug_yaml
    ;;
  esac
}

function _glooctl_debug_logs {
  _arguments \
    '--errors-only[filter for error logs only]' \
    '(-f --file)'{-f,--file}'[file to be read or written to]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--zip[save logs to a tar file (specify location with -f)]' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_debug_yaml {
  _arguments \
    '(-f --file)'{-f,--file}'[file to be read or written to]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_delete {
  local -a commands

  _arguments -C \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "proxy:delete a proxy"
      "upstream:delete an upstream"
      "upstreamgroup:delete an upstream group"
      "virtualservice:delete a virtualservice"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  proxy)
    _glooctl_delete_proxy
    ;;
  upstream)
    _glooctl_delete_upstream
    ;;
  upstreamgroup)
    _glooctl_delete_upstreamgroup
    ;;
  virtualservice)
    _glooctl_delete_virtualservice
    ;;
  esac
}

function _glooctl_delete_proxy {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_delete_upstream {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_delete_upstreamgroup {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_delete_virtualservice {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_demo {
  local -a commands

  _arguments -C \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "federation:Bootstrap a multicluster demo with Gloo Federation."
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  federation)
    _glooctl_demo_federation
    ;;
  esac
}

function _glooctl_demo_federation {
  _arguments \
    '--license-key[License key to activate Gloo Fed features]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_edit {
  local -a commands

  _arguments -C \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--resource-version[the resource version of the resource we are editing. if not empty, resource will only be changed if the resource version matches]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "route:"
      "settings:root command for settings"
      "upstream:edit an upstream in a namespace"
      "virtualservice:edit a virtualservice in a namespace"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  route)
    _glooctl_edit_route
    ;;
  settings)
    _glooctl_edit_settings
    ;;
  upstream)
    _glooctl_edit_upstream
    ;;
  virtualservice)
    _glooctl_edit_virtualservice
    ;;
  esac
}


function _glooctl_edit_route {
  local -a commands

  _arguments -C \
    '(-x --index)'{-x,--index}'[edit the route with this index in the virtual service route list]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--resource-version[the resource version of the resource we are editing. if not empty, resource will only be changed if the resource version matches]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "externalauth:Configure disable external auth on a route (Enterprise)"
      "ratelimit:Configure rate-limits (Enterprise)"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  externalauth)
    _glooctl_edit_route_externalauth
    ;;
  ratelimit)
    _glooctl_edit_route_ratelimit
    ;;
  esac
}

function _glooctl_edit_route_externalauth {
  _arguments \
    '(-d --disable)'{-d,--disable}'[set to true to disable authentication on this route]' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-x --index)'{-x,--index}'[edit the route with this index in the virtual service route list]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--resource-version[the resource version of the resource we are editing. if not empty, resource will only be changed if the resource version matches]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_edit_route_ratelimit {
  local -a commands

  _arguments -C \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-x --index)'{-x,--index}'[edit the route with this index in the virtual service route list]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--resource-version[the resource version of the resource we are editing. if not empty, resource will only be changed if the resource version matches]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "client-config:Add rate-limits (Enterprise)"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  client-config)
    _glooctl_edit_route_ratelimit_client-config
    ;;
  esac
}

function _glooctl_edit_route_ratelimit_client-config {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-x --index)'{-x,--index}'[edit the route with this index in the virtual service route list]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--resource-version[the resource version of the resource we are editing. if not empty, resource will only be changed if the resource version matches]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_edit_settings {
  local -a commands

  _arguments -C \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--resource-version[the resource version of the resource we are editing. if not empty, resource will only be changed if the resource version matches]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "externalauth:Configure external auth settings (Enterprise)"
      "ratelimit:Configure rate limit settings (Enterprise)"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  externalauth)
    _glooctl_edit_settings_externalauth
    ;;
  ratelimit)
    _glooctl_edit_settings_ratelimit
    ;;
  esac
}

function _glooctl_edit_settings_externalauth {
  _arguments \
    '--extauth-server-name[name of the ext auth server upstream]:' \
    '--extauth-server-namespace[namespace of the ext auth server upstream]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--resource-version[the resource version of the resource we are editing. if not empty, resource will only be changed if the resource version matches]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_edit_settings_ratelimit {
  local -a commands

  _arguments -C \
    '--deny-on-failure[On a failure to contact rate limit server, or on a timeout - deny the request (default is to allow)]' \
    '--ratelimit-server-name[name of the ext rate limit upstream]:' \
    '--ratelimit-server-namespace[namespace of the ext rate limit upstream]:' \
    '--request-timeout[The timeout of the request to the rate limit server. set to 0 to use the default.]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--resource-version[the resource version of the resource we are editing. if not empty, resource will only be changed if the resource version matches]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "server-config:Add rate-limit descriptor settings (Enterprise)"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  server-config)
    _glooctl_edit_settings_ratelimit_server-config
    ;;
  esac
}

function _glooctl_edit_settings_ratelimit_server-config {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--resource-version[the resource version of the resource we are editing. if not empty, resource will only be changed if the resource version matches]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_edit_upstream {
  _arguments \
    '--ssl-remove[Remove SSL configuration from this upstream]' \
    '--ssl-secret-name[name of the ssl secret for this upstream]:' \
    '--ssl-secret-namespace[namespace of the ssl secret for this upstream]:' \
    '--ssl-sni[SNI value to provide when contacting this upstream]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--resource-version[the resource version of the resource we are editing. if not empty, resource will only be changed if the resource version matches]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_edit_virtualservice {
  local -a commands

  _arguments -C \
    '--ssl-remove[Remove SSL configuration from this virtual service]' \
    '--ssl-secret-name[name of the ssl secret for this virtual service]:' \
    '--ssl-secret-namespace[namespace of the ssl secret for this virtual service]:' \
    '*--ssl-sni-domains[SNI domains for this virtual service]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--resource-version[the resource version of the resource we are editing. if not empty, resource will only be changed if the resource version matches]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "ratelimit:Configure rate limit settings (Enterprise)"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  ratelimit)
    _glooctl_edit_virtualservice_ratelimit
    ;;
  esac
}


function _glooctl_edit_virtualservice_ratelimit {
  local -a commands

  _arguments -C \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--resource-version[the resource version of the resource we are editing. if not empty, resource will only be changed if the resource version matches]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "client-config:Add rate-limits (Enterprise)"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  client-config)
    _glooctl_edit_virtualservice_ratelimit_client-config
    ;;
  esac
}

function _glooctl_edit_virtualservice_ratelimit_client-config {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--resource-version[the resource version of the resource we are editing. if not empty, resource will only be changed if the resource version matches]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_get {
  local -a commands

  _arguments -C \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "authconfig:read an authconfig or list authconfigs in a namespace"
      "proxy:read a proxy or list proxies in a namespace"
      "routetable:read a route table or list route tables in a namespace"
      "upstream:read an upstream or list upstreams in a namespace"
      "upstreamgroup:read an upstream group or list upstream groups in a namespace"
      "virtualservice:read a virtualservice or list virtualservices in a namespace"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  authconfig)
    _glooctl_get_authconfig
    ;;
  proxy)
    _glooctl_get_proxy
    ;;
  routetable)
    _glooctl_get_routetable
    ;;
  upstream)
    _glooctl_get_upstream
    ;;
  upstreamgroup)
    _glooctl_get_upstreamgroup
    ;;
  virtualservice)
    _glooctl_get_virtualservice
    ;;
  esac
}

function _glooctl_get_authconfig {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_get_proxy {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_get_routetable {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_get_upstream {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_get_upstreamgroup {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_get_virtualservice {
  local -a commands

  _arguments -C \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "route:get a list of routes for a given virtual service"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  route)
    _glooctl_get_virtualservice_route
    ;;
  esac
}

function _glooctl_get_virtualservice_route {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_help {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_install {
  local -a commands

  _arguments -C \
    '(-v --verbose)'{-v,--verbose}'[If true, output from kubectl commands will print to stdout/stderr]' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "federation:install Gloo Federation on Kubernetes"
      "gateway:install the Gloo Gateway on Kubernetes"
      "ingress:install the Gloo Ingress Controller on Kubernetes"
      "knative:install Knative with Gloo on Kubernetes"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  federation)
    _glooctl_install_federation
    ;;
  gateway)
    _glooctl_install_gateway
    ;;
  ingress)
    _glooctl_install_ingress
    ;;
  knative)
    _glooctl_install_knative
    ;;
  esac
}

function _glooctl_install_federation {
  _arguments \
    '--create-namespace[Create the namespace to install gloo fed into]' \
    '--dry-run[Dump the raw installation yaml instead of applying it to kubernetes]' \
    '--file[Install Gloo Fed from this Helm chart archive file rather than from a release]:' \
    '--license-key[License key to activate Gloo Fed features]:' \
    '--namespace[namespace to install gloo fed into]:' \
    '--release-name[helm release name]:' \
    '*--values[List of files with value overrides for the Gloo Fed Helm chart, (e.g. --values file1,file2 or --values file1 --values file2)]:' \
    '--version[version to install (e.g. 0.0.6, defaults to latest)]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    '(-v --verbose)'{-v,--verbose}'[If true, output from kubectl commands will print to stdout/stderr]'
}


function _glooctl_install_gateway {
  local -a commands

  _arguments -C \
    '--create-namespace[Create the namespace to install gloo into]' \
    '(-d --dry-run)'{-d,--dry-run}'[Dump the raw installation yaml instead of applying it to kubernetes]' \
    '(-f --file)'{-f,--file}'[Install Gloo from this Helm chart archive file rather than from a release]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace to install gloo into]:' \
    '--release-name[helm release name]:' \
    '*--values[List of files with value overrides for the Gloo Helm chart, (e.g. --values file1,file2 or --values file1 --values file2)]:' \
    '--version[version to install (e.g. 1.4.0, defaults to latest)]:' \
    '--with-admin-console[install gloo and a read-only version of its admin console]' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    '(-v --verbose)'{-v,--verbose}'[If true, output from kubectl commands will print to stdout/stderr]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "enterprise:install the Gloo Enterprise Gateway on Kubernetes"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  enterprise)
    _glooctl_install_gateway_enterprise
    ;;
  esac
}

function _glooctl_install_gateway_enterprise {
  _arguments \
    '--create-namespace[Create the namespace to install gloo into]' \
    '(-d --dry-run)'{-d,--dry-run}'[Dump the raw installation yaml instead of applying it to kubernetes]' \
    '(-f --file)'{-f,--file}'[Install Gloo from this Helm chart archive file rather than from a release]:' \
    '--license-key[License key to activate GlooE features]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace to install gloo into]:' \
    '--release-name[helm release name]:' \
    '*--values[List of files with value overrides for the Gloo Helm chart, (e.g. --values file1,file2 or --values file1 --values file2)]:' \
    '--version[version to install (e.g. 1.4.0, defaults to latest)]:' \
    '--with-admin-console[install gloo and a read-only version of its admin console]' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    '(-v --verbose)'{-v,--verbose}'[If true, output from kubectl commands will print to stdout/stderr]'
}

function _glooctl_install_ingress {
  _arguments \
    '--create-namespace[Create the namespace to install gloo into]' \
    '(-d --dry-run)'{-d,--dry-run}'[Dump the raw installation yaml instead of applying it to kubernetes]' \
    '(-f --file)'{-f,--file}'[Install Gloo from this Helm chart archive file rather than from a release]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace to install gloo into]:' \
    '--release-name[helm release name]:' \
    '*--values[List of files with value overrides for the Gloo Helm chart, (e.g. --values file1,file2 or --values file1 --values file2)]:' \
    '--version[version to install (e.g. 1.4.0, defaults to latest)]:' \
    '--with-admin-console[install gloo and a read-only version of its admin console]' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    '(-v --verbose)'{-v,--verbose}'[If true, output from kubectl commands will print to stdout/stderr]'
}

function _glooctl_install_knative {
  _arguments \
    '--create-namespace[Create the namespace to install gloo into]' \
    '(-d --dry-run)'{-d,--dry-run}'[Dump the raw installation yaml instead of applying it to kubernetes]' \
    '(-f --file)'{-f,--file}'[Install Gloo from this Helm chart archive file rather than from a release]:' \
    '(-e --install-eventing)'{-e,--install-eventing}'[Bundle Knative-Eventing with your Gloo installation. Requires install-knative to be true]' \
    '--install-eventing-version[Version of Knative Eventing to install, when --install-eventing is set to `true`]:' \
    '(-k --install-knative)'{-k,--install-knative}'[Bundle Knative-Serving with your Gloo installation]' \
    '--install-knative-version[Version of Knative Serving to install, when --install-knative is set to `true`. This version will also be used to install Knative Monitoring, --install-monitoring is set]:' \
    '(-m --install-monitoring)'{-m,--install-monitoring}'[Bundle Knative-Monitoring with your Gloo installation. Requires install-knative to be true]' \
    '(-n --namespace)'{-n,--namespace}'[namespace to install gloo into]:' \
    '--release-name[helm release name]:' \
    '(-g --skip-installing-gloo)'{-g,--skip-installing-gloo}'[Skip installing Gloo Edge. Only Knative components will be installed]' \
    '*--values[List of files with value overrides for the Gloo Helm chart, (e.g. --values file1,file2 or --values file1 --values file2)]:' \
    '--version[version to install (e.g. 1.4.0, defaults to latest)]:' \
    '--with-admin-console[install gloo and a read-only version of its admin console]' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    '(-v --verbose)'{-v,--verbose}'[If true, output from kubectl commands will print to stdout/stderr]'
}


function _glooctl_istio {
  local -a commands

  _arguments -C \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "enable-mtls:Enables Istio mTLS for a given upstream"
      "inject:Enable SDS & istio-proxy sidecars in gateway-proxy pod"
      "uninject:Remove SDS & istio-proxy sidecars from gateway-proxy pod"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  enable-mtls)
    _glooctl_istio_enable-mtls
    ;;
  inject)
    _glooctl_istio_inject
    ;;
  uninject)
    _glooctl_istio_uninject
    ;;
  esac
}

function _glooctl_istio_enable-mtls {
  _arguments \
    '(-u --upstream)'{-u,--upstream}'[upstream for which the istio sslConfig needs to change]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_istio_inject {
  _arguments \
    '--istio-namespace[namespace in which istio is installed]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_istio_uninject {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_plugin {
  local -a commands

  _arguments -C \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "list:List available glooctl plugins"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  list)
    _glooctl_plugin_list
    ;;
  esac
}

function _glooctl_plugin_list {
  _arguments \
    '--federation-namespace[namespace of the Gloo Federation control plane]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_proxy {
  local -a commands

  _arguments -C \
    '--name[the name of the proxy service/deployment to use]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--port[the name of the service port to connect to]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "address:print the socket address for a proxy"
      "dump:dump Envoy config from one of the proxy instances"
      "logs:dump Envoy logs from one of the proxy instancesNote: this will enable verbose logging on Envoy"
      "served-config:dump Envoy config being served by the Gloo xDS server"
      "stats:stats for one of the proxy instances"
      "url:print the http endpoint for a proxy"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  address)
    _glooctl_proxy_address
    ;;
  dump)
    _glooctl_proxy_dump
    ;;
  logs)
    _glooctl_proxy_logs
    ;;
  served-config)
    _glooctl_proxy_served-config
    ;;
  stats)
    _glooctl_proxy_stats
    ;;
  url)
    _glooctl_proxy_url
    ;;
  esac
}

function _glooctl_proxy_address {
  _arguments \
    '(-l --local-cluster)'{-l,--local-cluster}'[use when the target kubernetes cluster is running locally, e.g. in minikube or minishift. this will default to true if LoadBalanced services are not assigned external IPs by your cluster]' \
    '(-p --local-cluster-name)'{-p,--local-cluster-name}'[name of the locally running minikube cluster.]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[the name of the proxy service/deployment to use]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--port[the name of the service port to connect to]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_proxy_dump {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[the name of the proxy service/deployment to use]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--port[the name of the service port to connect to]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_proxy_logs {
  _arguments \
    '(-d --debug)'{-d,--debug}'[enable debug logging on the proxy as part of this command]' \
    '(-f --follow)'{-f,--follow}'[enable debug logging on the proxy as part of this command]' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[the name of the proxy service/deployment to use]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--port[the name of the service port to connect to]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_proxy_served-config {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[the name of the proxy service/deployment to use]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--port[the name of the service port to connect to]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_proxy_stats {
  _arguments \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[the name of the proxy service/deployment to use]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--port[the name of the service port to connect to]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_proxy_url {
  _arguments \
    '(-l --local-cluster)'{-l,--local-cluster}'[use when the target kubernetes cluster is running locally, e.g. in minikube or minishift. this will default to true if LoadBalanced services are not assigned external IPs by your cluster]' \
    '(-p --local-cluster-name)'{-p,--local-cluster-name}'[name of the locally running minikube cluster.]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[the name of the proxy service/deployment to use]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--port[the name of the service port to connect to]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_remove {
  local -a commands

  _arguments -C \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "route:Remove a Route from a Virtual Service"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  route)
    _glooctl_remove_route
    ;;
  esac
}

function _glooctl_remove_route {
  _arguments \
    '(-x --index)'{-x,--index}'[remove the route with this index in the virtual service route list]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_route {
  local -a commands

  _arguments -C \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "sort:sort routes on an existing virtual service"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  sort)
    _glooctl_route_sort
    ;;
  esac
}

function _glooctl_route_sort {
  _arguments \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--name[name of the resource to read or write]:' \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}


function _glooctl_uninstall {
  local -a commands

  _arguments -C \
    '--all[Deletes all gloo resources, including the namespace, crds, and cluster role]' \
    '--delete-crds[Delete all gloo crds (all custom gloo objects will be deleted)]' \
    '--delete-namespace[Delete the namespace (all objects written to this namespace will be deleted)]' \
    '(-n --namespace)'{-n,--namespace}'[namespace in which Gloo is installed]:' \
    '--release-name[helm release name]:' \
    '(-v --verbose)'{-v,--verbose}'[If true, output from kubectl commands will print to stdout/stderr]' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "federation:uninstall gloo federation"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  federation)
    _glooctl_uninstall_federation
    ;;
  esac
}

function _glooctl_uninstall_federation {
  _arguments \
    '--all[Deletes all gloo fed resources, including the namespace, crds, and cluster role]' \
    '--delete-crds[Delete all gloo fed crds (all custom gloo fed objects will be deleted)]' \
    '--delete-namespace[Delete the namespace (all objects written to this namespace will be deleted)]' \
    '--namespace[namespace in which Gloo Fed is installed]:' \
    '--release-name[helm release name]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]' \
    '(-v --verbose)'{-v,--verbose}'[If true, output from kubectl commands will print to stdout/stderr]'
}

function _glooctl_upgrade {
  _arguments \
    '--path[Desired path for your upgraded glooctl binary. Defaults to the location of your currently executing binary.]:' \
    '--release[Which glooctl release to download. Specify a git tag corresponding to the desired version of glooctl.]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

function _glooctl_version {
  _arguments \
    '(-n --namespace)'{-n,--namespace}'[namespace for reading or writing resources]:' \
    '(-o --output)'{-o,--output}'[output format: (yaml, json, table, kube-yaml, wide)]:' \
    '(-c --config)'{-c,--config}'[set the path to the glooctl config file]:' \
    '--consul-address[address of the Consul server. Use with --use-consul]:' \
    '--consul-datacenter[Datacenter to use. If not provided, the default agent datacenter is used. Use with --use-consul]:' \
    '--consul-root-key[key prefix for for Consul key-value storage.]:' \
    '--consul-scheme[URI scheme for the Consul server. Use with --use-consul]:' \
    '--consul-token[Token is used to provide a per-request ACL token which overrides the agent'\''s default token. Use with --use-consul]:' \
    '(-i --interactive)'{-i,--interactive}'[use interactive mode]' \
    '--kubeconfig[kubeconfig to use, if not standard one]:' \
    '--use-consul[use Consul Key-Value storage as the backend for reading and writing config (VirtualServices, Upstreams, and Proxies)]'
}

